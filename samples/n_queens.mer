func abs(x: i64) -> i64
    = case x < 0 then -x
      otherwise +x

func init_board(n: i64) -> [&]i64
{
    var board = alloc<i64>(n)
    var i = 0
    while i < n do
    {
        board[i] = -1
        i = i + 1
    }
    return board
}

func is_correct(n: i64, board: [&]i64, i: i64) -> bool
{
    if i == 0 then
        return true
    
    var ci = board[i - 1]
    var j = 0
    while j < i - 1 do
    {
        var cj = board[j]
        if cj >= -1 and (ci == cj or abs(ci - cj) == abs(i - j - 1)) then
            return false
        j = j + 1
    }

    return true
}

func backtrack(n: i64, board: [&]i64, i: i64) -> i64
{
    if not is_correct(n, board, i) then
        return 0
    
    if i >= n then
        return 1
    
    var count = 0
    var j = 0
    while j < n do
    {
        board[i] = j
        j = j + 1
        count = count + backtrack(n, board, i + 1)
    }

    return count
}

func backtrack_find(n: i64, board: [&]i64, i: i64) -> bool
{
    if not is_correct(n, board, i) then
        return false
    
    if i >= n then
        return true
    
    var j = 0
    while j < n do
    {
        board[i] = j
        j = j + 1
        if backtrack_find(n, board, i + 1) then
            return true
    }
    return false
}

func count_solutions(n: i64) -> i64
    = backtrack(n, init_board(n), 0)

func find_solution(n: i64) -> [&]i64
{
    var board = init_board(n)
    backtrack_find(n, board, 0)
    return board
}

func print_board(n: i64, board: [&]i64) -> ()
{
    var i = 0
    while i < n do
    {
        var x = board[i]
        if x >= 0 then
        {
            var j = 0
            while j < x do
            {
                print &"· "
                j = j + 1
            }
            print &"♛ "
            while j < n - 1 do
            {
                print &"· "
                j = j + 1
            }
            print &"\n"
        }
        i = i + 1
    }
    return
}


var n = 8
print &"n = "
debug n
print &"number of solutions = "
var count = debug count_solutions(n)
if count > 0 then
{
    print &"\n"
    print_board(n, find_solution(n))
}
return
